# Makefile.in generated automatically by automake 1.4-p6 from Makefile.am
# Generated automatically from Makefile.in by config.pl.
# KDE tags expanded automatically by am_edit - $Revision: 1.10 $ 

# Copyright (C) 1994, 1995-8, 1999, 2001 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

####### kdevelop will overwrite this part!!! (begin)##########


SHELL = /bin/sh

srcdir = .
top_srcdir = ..
VPATH = .
prefix = /usr/kde/3.1
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/info
mandir = ${prefix}/man
includedir = ${prefix}/include
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/confwiz
pkglibdir = $(libdir)/confwiz
pkgincludedir = $(includedir)/confwiz

top_builddir = ..

ACLOCAL = ${SHELL} /home/z9u2K/projects/kinneret/cvs/confwiz/admin/missing --run aclocal
AUTOCONF = ${SHELL} /home/z9u2K/projects/kinneret/cvs/confwiz/admin/missing --run autoconf
AUTOMAKE = ${SHELL} /home/z9u2K/projects/kinneret/cvs/confwiz/admin/missing --run automake
AUTOHEADER = ${SHELL} /home/z9u2K/projects/kinneret/cvs/confwiz/admin/missing --run autoheader

INSTALL = /bin/install -c -p
INSTALL_PROGRAM = ${INSTALL} $(INSTALL_STRIP_FLAG) $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_SCRIPT = ${INSTALL}
transform = s,x,x,

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = 
build_triplet = i686-pc-linux-gnu
host_alias = 
host_triplet = i686-pc-linux-gnu
target_alias = 
target_triplet = i686-pc-linux-gnu
AMTAR = ${SHELL} /home/z9u2K/projects/kinneret/cvs/confwiz/admin/missing --run tar
ARTSCCONFIG = /usr/kde/3.1/bin/artsc-config
AS = @AS@
AUTODIRS = 
AWK = gawk
CC = gcc
CONF_FILES =  $(top_srcdir)/./admin/configure.in.min $(top_srcdir)/configure.in.in
CPP = gcc -E
CXX = g++
CXXCPP = g++ -E
DCOPIDL = /usr/kde/3.1/bin/dcopidl
DCOPIDL2CPP = /usr/kde/3.1/bin/dcopidl2cpp
DCOP_DEPENDENCIES = $(DCOPIDL)
DEPDIR = .deps
DLLTOOL = @DLLTOOL@
DOXYGEN = @DOXYGEN@
DOXYGEN_PROJECT_NAME = @DOXYGEN_PROJECT_NAME@
DOXYGEN_PROJECT_NUMBER = @DOXYGEN_PROJECT_NUMBER@
DPMSINC = @DPMSINC@
DPMSLIB = @DPMSLIB@
ECHO = echo
EXEEXT = 
FRAMEWORK_COREAUDIO = 
GCJ = @GCJ@
GCJFLAGS = @GCJFLAGS@
GLINC = @GLINC@
GLLIB = @GLLIB@
GMSGFMT = /usr/bin/msgfmt
IDL = @IDL@
IDL_DEPENDENCIES = @IDL_DEPENDENCIES@
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
JAR = @JAR@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JVMLIBS = @JVMLIBS@
KDECONFIG = /usr/kde/3.1/bin/kde-config
KDE_EXTRA_RPATH = 
KDE_HAS_DOXYGEN = @KDE_HAS_DOXYGEN@
KDE_HAVE_DOT = @KDE_HAVE_DOT@
KDE_INCLUDES = -I/usr/kde/3.1/include
KDE_LDFLAGS = -L/usr/kde/3.1/lib
KDE_MT_LDFLAGS = 
KDE_MT_LIBS = -lpthread
KDE_PLUGIN = -avoid-version -module -no-undefined $(KDE_RPATH) $(KDE_MT_LDFLAGS)
KDE_RPATH = -R $(kde_libraries) -R $(qt_libraries) -R $(x_libraries)
KDE_USE_CLOSURE_FALSE = #
KDE_USE_CLOSURE_TRUE = 
KDE_USE_FINAL_FALSE = 
KDE_USE_FINAL_TRUE = #
KDE_XSL_STYLESHEET = /usr/kde/3.1/share/apps/ksgmltools2/customization/kde-chunk.xsl
LEX = @LEX@
LEXLIB = @LEXLIB@
LIBBZ2 = @LIBBZ2@
LIBCOMPAT = 
LIBCRYPT = -lcrypt
LIBDL = -ldl
LIBGEN = @LIBGEN@
LIBJPEG = -ljpeg
LIBMICO = @LIBMICO@
LIBOBJS = 
LIBPNG = -lpng -lz -lm
LIBPTHREAD = -lpthread
LIBPYTHON = @LIBPYTHON@
LIBQIMGIO = @LIBQIMGIO@
LIBRESOLV = -lresolv
LIBSHADOW = @LIBSHADOW@
LIBSM = -lSM -lICE
LIBSOCKET = 
LIBSSL = @LIBSSL@
LIBTIFF = @LIBTIFF@
LIBTOOL = $(SHELL) $(top_builddir)/libtool --silent
LIBUCB = 
LIBUTIL = -lutil
LIBXINERAMA = 
LIBZ = -lz
LIB_KAB = -lkab
LIB_KABC = -lkabc
LIB_KDECORE = -lkdecore
LIB_KDEPRINT = -lkdeprint
LIB_KDEUI = -lkdeui
LIB_KFILE = -lkio
LIB_KFM = 
LIB_KHTML = -lkhtml
LIB_KIMGIO = @LIB_KIMGIO@
LIB_KIO = -lkio
LIB_KPARTS = -lkparts
LIB_KSPELL = -lkspell
LIB_KSYCOCA = -lkio
LIB_POLL = 
LIB_QPE = 
LIB_QT = -lqt-mt  $(LIBPNG) -lXext $(LIB_X11) $(LIBSM) -lpthread
LIB_QTOPIA = @LIB_QTOPIA@
LIB_SMB = -lsmb
LIB_X11 = -lX11 $(LIBSOCKET)
LIB_XEXT = -lXext
LN_S = ln -s
MAKEINFO = ${SHELL} /home/z9u2K/projects/kinneret/cvs/confwiz/admin/missing --run makeinfo
MCOPIDL = /usr/kde/3.1/bin/mcopidl
MEINPROC = /usr/kde/3.1/bin/meinproc
MICO_INCLUDES = @MICO_INCLUDES@
MICO_LDFLAGS = @MICO_LDFLAGS@
MOC = /usr/qt/3/bin/moc
MSGFMT = /usr/bin/msgfmt
NOOPT_CFLAGS = -O0
NOOPT_CXXFLAGS = -O0
NOREPO = -fno-repo
OBJDUMP = @OBJDUMP@
OBJEXT = o
PACKAGE = confwiz
PAMLIBS = @PAMLIBS@
PASSWDLIBS = @PASSWDLIBS@
PYTHONINC = @PYTHONINC@
PYTHONLIB = @PYTHONLIB@
PYTHONMODDIR = @PYTHONMODDIR@
QTDOCDIR = @QTDOCDIR@
QTE_NORTTI = 
QTOPIA_INCLUDES = @QTOPIA_INCLUDES@
QT_INCLUDES = -I/usr/qt/3/include
QT_LDFLAGS = -L/usr/qt/3/lib
RANLIB = ranlib
RC = @RC@
REPO = -frepo
SETUIDFLAGS = @SETUIDFLAGS@
SSL_INCLUDES = @SSL_INCLUDES@
SSL_LDFLAGS = @SSL_LDFLAGS@
STRIP = strip
TOPSUBDIRS =  confwiz doc po scripts
UIC = /usr/qt/3/bin/uic -L $(kde_widgetdir) -nounload
UIC_TR = tr2i18n
USER_INCLUDES = 
USER_LDFLAGS = 
USE_EXCEPTIONS = -fexceptions
USE_RTTI = 
USE_THREADS = 
VERSION = 0.3.1
WOVERLOADED_VIRTUAL = 
XGETTEXT = /usr/bin/xgettext
XPMINC = @XPMINC@
XPMLIB = @XPMLIB@
X_EXTRA_LIBS = 
X_INCLUDES = -I/usr/X11R6/include
X_LDFLAGS = -L/usr/X11R6/lib
X_PRE_LIBS = 
all_includes = -I/usr/kde/3.1/include -I/usr/qt/3/include -I/usr/X11R6/include 
all_libraries = -L/usr/X11R6/lib -L/usr/qt/3/lib -L/usr/kde/3.1/lib 
am__include = include
am__quote = 
idldir = @idldir@
install_sh = /home/z9u2K/projects/kinneret/cvs/confwiz/admin/install-sh
jni_includes = @jni_includes@
kde_appsdir = ${prefix}/share/applnk
kde_bindir = ${exec_prefix}/bin
kde_confdir = ${prefix}/share/config
kde_datadir = ${prefix}/share/apps
kde_htmldir = ${prefix}/share/doc/HTML
kde_icondir = ${prefix}/share/icons
kde_includes = /usr/kde/3.1/include
kde_libraries = /usr/kde/3.1/lib
kde_libs_htmldir = /usr/kde/3.1/share/doc/HTML
kde_libs_prefix = /usr/kde/3.1
kde_locale = ${prefix}/share/locale
kde_mimedir = ${prefix}/share/mimelnk
kde_moduledir = ${libdir}/kde3
kde_qtver = 3
kde_servicesdir = ${prefix}/share/services
kde_servicetypesdir = ${prefix}/share/servicetypes
kde_sounddir = ${prefix}/share/sounds
kde_styledir = ${libdir}/kde3/plugins/styles
kde_templatesdir = ${prefix}/share/templates
kde_wallpaperdir = ${prefix}/share/wallpapers
kde_widgetdir = /usr/kde/3.1/lib/kde3/plugins/designer
libdir = ${exec_prefix}/lib
micodir = @micodir@
qt_includes = /usr/qt/3/include
qt_libraries = /usr/qt/3/lib
x_includes = /usr/X11R6/include
x_libraries = /usr/X11R6/lib

bin_PROGRAMS = confwiz

#>- confwiz_SOURCES = help.ui pleasewait.ui confwiz.cpp dirview.cpp configwizard.ui main.cpp 
#>+ 1
confwiz_SOURCES=  confwiz.cpp dirview.cpp  main.cpp  help.cpp pleasewait.cpp configwizard.cpp
confwiz_LDADD = $(LIB_KHTML) $(LIB_KDEUI) $(LIB_KDECORE) $(LIB_QT) $(LIBSOCKET)

EXTRA_DIST = main.cpp confwiz.desktop configwizard.ui dirview.cpp dirview.h configwizard.ui.h confwiz.cpp confwiz.h pleasewait.ui confwiz-128.png confwiz-22.png confwiz-32.png confwiz-48.png confwiz-64.png confwiz-16.png pleasewait.ui.h help.ui 

####### kdevelop will overwrite this part!!! (end)############
# These paths are KDE specific. Use them:
# kde_appsdir         Where your application's menu entry (.desktop) should go to.
# kde_icondir         Where your icon should go to - better use KDE_ICON.
# kde_sounddir        Where your sounds should go to.
# kde_htmldir         Where your docs should go to. (contains lang subdirs)
# kde_datadir         Where you install application data. (Use a subdir)
# kde_locale          Where translation files should go to. (contains lang subdirs)
# kde_cgidir          Where cgi-bin executables should go to.
# kde_confdir         Where config files should go to (system-wide ones with default values).
# kde_mimedir         Where mimetypes .desktop files should go to.
# kde_servicesdir     Where services .desktop files should go to.
# kde_servicetypesdir Where servicetypes .desktop files should go to.
# kde_toolbardir      Where general toolbar icons should go to (deprecated, use KDE_ICON).
# kde_wallpaperdir    Where general wallpapers should go to.
# kde_templatesdir    Where templates for the "New" menu (Konqueror/KDesktop) should go to.
# kde_bindir          Where executables should go to. Use bin_PROGRAMS or bin_SCRIPTS.
# kde_libdir          Where shared libraries should go to. Use lib_LTLIBRARIES.
# kde_moduledir       Where modules (e.g. parts) should go to. Use kde_module_LTLIBRARIES.
# kde_styledir        Where Qt/KDE widget styles should go to (new in KDE 3).
# kde_designerdir     Where Qt Designer plugins should go to (new in KDE 3).

# set the include path for X, qt and KDE
INCLUDES = $(all_includes)

#>- METASOURCES = AUTO

# the library search path. 
confwiz_LDFLAGS = $(all_libraries) $(KDE_RPATH)
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = ../config.h
CONFIG_CLEAN_FILES = 
bin_PROGRAMS =  confwiz$(EXEEXT)
PROGRAMS =  $(bin_PROGRAMS)


DEFS = -DHAVE_CONFIG_H -I. -I$(srcdir) -I..
CPPFLAGS =  -DQT_THREAD_SUPPORT  -D_REENTRANT
LDFLAGS = 
LIBS = 
#>- confwiz_OBJECTS =  confwiz.$(OBJEXT) dirview.$(OBJEXT) main.$(OBJEXT)
#>+ 5
confwiz_final_OBJECTS = confwiz.all_cpp.o 
confwiz_nofinal_OBJECTS = confwiz.$(OBJEXT) dirview.$(OBJEXT) main.$(OBJEXT) help.$(OBJEXT) pleasewait.$(OBJEXT) configwizard.$(OBJEXT)\
dirview.moc.o confwiz.moc.o 
confwiz_OBJECTS = $(confwiz_nofinal_OBJECTS)
#confwiz_OBJECTS = $(confwiz_final_OBJECTS)
confwiz_DEPENDENCIES = 
CXXFLAGS = -Wnon-virtual-dtor -Wno-long-long -Wundef -Wall -pedantic -W -Wpointer-arith -Wmissing-prototypes -Wwrite-strings -ansi -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -Wcast-align -Wconversion -O2 -fno-exceptions -fno-check-new
#>- CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 1
CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 1
LTCXXCOMPILE = $(LIBTOOL) --mode=compile --tag=CXX $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@
#>+ 1
CXXLINK = $(LIBTOOL) --mode=link --tag=CXX $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) $(LDFLAGS) -o $@
DIST_COMMON =  Makefile.am Makefile.in


#>- DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)
#>+ 4
KDE_DIST=lo32-app-confwiz.png lo16-app-confwiz.png pleasewait.h confwiz.desktop help.h configwizard.h confwiz 

DISTFILES= $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)


TAR = tar
GZIP_ENV = --best
#>- DEP_FILES =  .deps/confwiz.P .deps/dirview.P .deps/main.P
#>+ 3
#DEP_FILES =  $(DEPDIR)/help.P $(DEPDIR)/pleasewait.P $(DEPDIR)/configwizard.P $(DEPDIR)/dirview.moc.P $(DEPDIR)/confwiz.moc.P  $(DEPDIR)/confwiz.all_cpp.P   .deps/confwiz.P .deps/dirview.P .deps/main.P
DEP_FILES =  $(DEPDIR)/help.P $(DEPDIR)/pleasewait.P $(DEPDIR)/configwizard.P $(DEPDIR)/dirview.moc.P $(DEPDIR)/confwiz.moc.P   .deps/confwiz.P .deps/dirview.P .deps/main.P

SOURCES = $(confwiz_SOURCES)
OBJECTS = $(confwiz_OBJECTS)

#>- all: all-redirect
#>+ 1
all: docs-am  all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .cpp .lo .o .obj .s
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
#>- 	cd $(top_srcdir) && $(AUTOMAKE) --gnu confwiz/Makefile
#>+ 2
	cd $(top_srcdir) && $(AUTOMAKE) --gnu confwiz/Makefile
	cd $(top_srcdir) && perl admin/am_edit confwiz/Makefile.in

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`"; \
	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	list='$(bin_PROGRAMS)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	done

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

confwiz$(EXEEXT): $(confwiz_OBJECTS) $(confwiz_DEPENDENCIES)
	@rm -f confwiz$(EXEEXT)
	$(CXXLINK) $(confwiz_LDFLAGS) $(confwiz_OBJECTS) $(confwiz_LDADD) $(LIBS)
.cpp.o:
	$(CXXCOMPILE) -c $<
.cpp.obj:
	$(CXXCOMPILE) -c `cygpath -w $<`
.cpp.lo:
	$(LTCXXCOMPILE) -c $<

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = confwiz

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu confwiz/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:
	-rm -rf .deps

maintainer-clean-depend:

%.o: %.c
	@echo '$(COMPILE) -c $<'; \
	$(COMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.c
	@echo '$(LTCOMPILE) -c $<'; \
	$(LTCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp

%.o: %.cpp
	@echo '$(CXXCOMPILE) -c $<'; \
	$(CXXCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.cpp
	@echo '$(LTCXXCOMPILE) -c $<'; \
	$(LTCXXCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp
info-am:
info: info-am
dvi-am:
dvi: dvi-am
check-am: all-am
check: check-am
installcheck-am:
installcheck: installcheck-am
install-exec-am: install-binPROGRAMS
install-exec: install-exec-am

install-data-am: install-data-local
install-data: install-data-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-am
uninstall-am: uninstall-binPROGRAMS uninstall-local
uninstall: uninstall-am
all-am: Makefile $(PROGRAMS)
all-redirect: all-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(bindir)


mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-binPROGRAMS mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags mostlyclean-depend \
		mostlyclean-generic

mostlyclean: mostlyclean-am

#>- clean-am:  clean-binPROGRAMS clean-compile clean-libtool clean-tags \
#>- 		clean-depend clean-generic mostlyclean-am
#>+ 2
clean-am: clean-metasources clean-ui clean-final   clean-binPROGRAMS clean-compile clean-libtool clean-tags \
		clean-depend clean-generic mostlyclean-am

#>- clean: clean-am
#>+ 1
clean: kde-rpo-clean  clean-am

distclean-am:  distclean-binPROGRAMS distclean-compile distclean-libtool \
		distclean-tags distclean-depend distclean-generic \
		clean-am
	-rm -f libtool

distclean: distclean-am

maintainer-clean-am:  maintainer-clean-binPROGRAMS \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-depend \
		maintainer-clean-generic distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-am

.PHONY: mostlyclean-binPROGRAMS distclean-binPROGRAMS clean-binPROGRAMS \
maintainer-clean-binPROGRAMS uninstall-binPROGRAMS install-binPROGRAMS \
mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile mostlyclean-libtool distclean-libtool \
clean-libtool maintainer-clean-libtool tags mostlyclean-tags \
distclean-tags clean-tags maintainer-clean-tags distdir \
mostlyclean-depend distclean-depend clean-depend \
maintainer-clean-depend info-am info dvi-am dvi check check-am \
installcheck-am installcheck install-exec-am install-exec \
install-data-local install-data-am install-data install-am install \
uninstall-local uninstall-am uninstall all-redirect all-am all \
installdirs mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


install-data-local:
#>- 	$(mkinstalldirs) /etc/skel/.kde/Autostart/
#>+ 1
	$(mkinstalldirs) $(DESTDIR)/etc/skel/.kde/Autostart/
#>- 	$(INSTALL_DATA) $(srcdir)/confwiz.desktop /etc/skel/.kde/Autostart/confwiz.desktop
#>+ 1
	$(INSTALL_DATA) $(srcdir)/confwiz.desktop $(DESTDIR)/etc/skel/.kde/Autostart/confwiz.desktop
#>- 	$(mkinstalldirs) $(kde_icondir)/kinneret/128x128/apps/
#>+ 1
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/kinneret/128x128/apps/
#>- 	$(INSTALL_DATA) $(srcdir)/confwiz-128.png $(kde_icondir)/kinneret/128x128/apps/confwiz.png
#>+ 1
	$(INSTALL_DATA) $(srcdir)/confwiz-128.png $(DESTDIR)$(kde_icondir)/kinneret/128x128/apps/confwiz.png
#>- 	$(mkinstalldirs) $(kde_icondir)/kinneret/22x22/apps/
#>+ 1
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/kinneret/22x22/apps/
#>- 	$(INSTALL_DATA) $(srcdir)/confwiz-22.png $(kde_icondir)/kinneret/22x22/apps/confwiz.png
#>+ 1
	$(INSTALL_DATA) $(srcdir)/confwiz-22.png $(DESTDIR)$(kde_icondir)/kinneret/22x22/apps/confwiz.png
#>- 	$(mkinstalldirs) $(kde_icondir)/kinneret/32x32/apps/
#>+ 1
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/kinneret/32x32/apps/
#>- 	$(INSTALL_DATA) $(srcdir)/confwiz-32.png $(kde_icondir)/kinneret/32x32/apps/confwiz.png
#>+ 1
	$(INSTALL_DATA) $(srcdir)/confwiz-32.png $(DESTDIR)$(kde_icondir)/kinneret/32x32/apps/confwiz.png
#>- 	$(mkinstalldirs) $(kde_icondir)/kinneret/48x48/apps/
#>+ 1
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/kinneret/48x48/apps/
#>- 	$(INSTALL_DATA) $(srcdir)/confwiz-48.png $(kde_icondir)/kinneret/48x48/apps/confwiz.png
#>+ 1
	$(INSTALL_DATA) $(srcdir)/confwiz-48.png $(DESTDIR)$(kde_icondir)/kinneret/48x48/apps/confwiz.png
#>- 	$(mkinstalldirs) $(kde_icondir)/kinneret/64x64/apps/
#>+ 1
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/kinneret/64x64/apps/
#>- 	$(INSTALL_DATA) $(srcdir)/confwiz-64.png $(kde_icondir)/kinneret/64x64/apps/confwiz.png
#>+ 1
	$(INSTALL_DATA) $(srcdir)/confwiz-64.png $(DESTDIR)$(kde_icondir)/kinneret/64x64/apps/confwiz.png
#>- 	$(mkinstalldirs) $(kde_icondir)/kinneret/16x16/apps/
#>+ 1
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/kinneret/16x16/apps/
#>- 	$(INSTALL_DATA) $(srcdir)/confwiz-16.png $(kde_icondir)/kinneret/16x16/apps/confwiz.png
#>+ 1
	$(INSTALL_DATA) $(srcdir)/confwiz-16.png $(DESTDIR)$(kde_icondir)/kinneret/16x16/apps/confwiz.png

uninstall-local:
#>- 	-rm -f /etc/skel/.kde/Autostart/confwiz.desktop
#>+ 1
	-rm -f $(DESTDIR)/etc/skel/.kde/Autostart/confwiz.desktop
#>- 	-rm -f $(kde_icondir)/kinneret/128x128/apps/confwiz.png
#>+ 1
	-rm -f $(DESTDIR)$(kde_icondir)/kinneret/128x128/apps/confwiz.png
#>- 	-rm -f $(kde_icondir)/kinneret/22x22/apps/confwiz.png
#>+ 1
	-rm -f $(DESTDIR)$(kde_icondir)/kinneret/22x22/apps/confwiz.png
#>- 	-rm -f $(kde_icondir)/kinneret/32x32/apps/confwiz.png
#>+ 1
	-rm -f $(DESTDIR)$(kde_icondir)/kinneret/32x32/apps/confwiz.png
#>- 	-rm -f $(kde_icondir)/kinneret/48x48/apps/confwiz.png
#>+ 1
	-rm -f $(DESTDIR)$(kde_icondir)/kinneret/48x48/apps/confwiz.png
#>- 	-rm -f $(kde_icondir)/kinneret/64x64/apps/confwiz.png
#>+ 1
	-rm -f $(DESTDIR)$(kde_icondir)/kinneret/64x64/apps/confwiz.png
#>- 	-rm -f $(kde_icondir)/kinneret/16x16/apps/confwiz.png
#>+ 1
	-rm -f $(DESTDIR)$(kde_icondir)/kinneret/16x16/apps/confwiz.png

# Uncomment the following two lines if you add a ui.rc file for your application to make use of
# KDEs XML GUI builing
#rcdir = $(kde_datadir)/confwiz
#rc_DATA = confwizui.rc

#WARNING: if you use a ui.rc file above, use:

# messages: rc.cpp

# instead of 

# messages:

messages: 
	LIST=`find . -name \*.h -o -name \*.hh -o -name \*.H -o -name \*.hxx -o -name \*.hpp -o -name \*.cpp -o -name \*.cc -o -name \*.cxx -o -name \*.ecpp -o -name \*.C`; \
	if test -n "$$LIST"; then \
	 $(XGETTEXT) $$LIST -o $(podir)/confwiz.pot; \
	fi

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 40
help.cpp: $(srcdir)/help.ui help.h help.moc
	rm -f help.cpp
	echo '#include <klocale.h>' > help.cpp
	$(UIC) -tr ${UIC_TR} -i help.h $(srcdir)/help.ui > help.cpp.temp ; ret=$$?; \
	sed -e "s,${UIC_TR}( \"\" ),QString::null,g" help.cpp.temp | sed -e "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | sed -e "s,image\([0-9][0-9]*\)_data,img\1_help,g" >> help.cpp ;\
	rm -f help.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "help.moc"' >> help.cpp; else rm -f help.cpp ; exit $$ret ; fi

help.h: $(srcdir)/help.ui
	$(UIC) -o help.h $(srcdir)/help.ui

help.moc: help.h
	$(MOC) help.h -o help.moc
pleasewait.cpp: $(srcdir)/pleasewait.ui pleasewait.h pleasewait.moc
	rm -f pleasewait.cpp
	echo '#include <klocale.h>' > pleasewait.cpp
	$(UIC) -tr ${UIC_TR} -i pleasewait.h $(srcdir)/pleasewait.ui > pleasewait.cpp.temp ; ret=$$?; \
	sed -e "s,${UIC_TR}( \"\" ),QString::null,g" pleasewait.cpp.temp | sed -e "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | sed -e "s,image\([0-9][0-9]*\)_data,img\1_pleasewait,g" >> pleasewait.cpp ;\
	rm -f pleasewait.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "pleasewait.moc"' >> pleasewait.cpp; else rm -f pleasewait.cpp ; exit $$ret ; fi

pleasewait.h: $(srcdir)/pleasewait.ui
	$(UIC) -o pleasewait.h $(srcdir)/pleasewait.ui

pleasewait.moc: pleasewait.h
	$(MOC) pleasewait.h -o pleasewait.moc
configwizard.cpp: $(srcdir)/configwizard.ui configwizard.h configwizard.moc
	rm -f configwizard.cpp
	echo '#include <klocale.h>' > configwizard.cpp
	$(UIC) -tr ${UIC_TR} -i configwizard.h $(srcdir)/configwizard.ui > configwizard.cpp.temp ; ret=$$?; \
	sed -e "s,${UIC_TR}( \"\" ),QString::null,g" configwizard.cpp.temp | sed -e "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | sed -e "s,image\([0-9][0-9]*\)_data,img\1_configwizard,g" >> configwizard.cpp ;\
	rm -f configwizard.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "configwizard.moc"' >> configwizard.cpp; else rm -f configwizard.cpp ; exit $$ret ; fi

configwizard.h: $(srcdir)/configwizard.ui
	$(UIC) -o configwizard.h $(srcdir)/configwizard.ui

configwizard.moc: configwizard.h
	$(MOC) configwizard.h -o configwizard.moc

#>+ 3
dirview.moc.cpp: $(srcdir)/dirview.h
	$(MOC) $(srcdir)/dirview.h -o dirview.moc.cpp

#>+ 3
confwiz.moc.cpp: $(srcdir)/confwiz.h
	$(MOC) $(srcdir)/confwiz.h -o confwiz.moc.cpp

#>+ 3
clean-metasources:
	-rm -f  dirview.moc.cpp confwiz.moc.cpp

#>+ 6
clean-ui:
	-rm -f \
	help.cpp help.h help.moc \
	pleasewait.cpp pleasewait.h pleasewait.moc \
	configwizard.cpp configwizard.h configwizard.moc 

#>+ 2
docs-am:

#>+ 5
force-reedit:
		cd $(top_srcdir) && $(AUTOMAKE) --gnu confwiz/Makefile
	cd $(top_srcdir) && perl admin/am_edit confwiz/Makefile.in


#>+ 11
confwiz.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/confwiz.cpp $(srcdir)/dirview.cpp $(srcdir)/main.cpp $(srcdir)/help.cpp $(srcdir)/pleasewait.cpp $(srcdir)/configwizard.cpp $(srcdir)/dirview.moc.cpp $(srcdir)/confwiz.moc.cpp  pleasewait.moc help.moc configwizard.moc
	@echo 'creating confwiz.all_cpp.cpp ...'; \
	rm -f confwiz.all_cpp.files confwiz.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> confwiz.all_cpp.final; \
	for file in confwiz.cpp dirview.cpp main.cpp help.cpp pleasewait.cpp configwizard.cpp dirview.moc.cpp confwiz.moc.cpp ; do \
	  echo "#include \"$$file\"" >> confwiz.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> confwiz.all_cpp.final; \
	done; \
	cat confwiz.all_cpp.final confwiz.all_cpp.files > confwiz.all_cpp.cpp; \
	rm -f confwiz.all_cpp.final confwiz.all_cpp.files

#>+ 3
clean-final:
	-rm -f confwiz.all_cpp.cpp

#>+ 2
final:
	$(MAKE) confwiz_OBJECTS="$(confwiz_final_OBJECTS)" all-am
#>+ 2
final-install:
	$(MAKE) confwiz_OBJECTS="$(confwiz_final_OBJECTS)" install-am
#>+ 2
no-final:
	$(MAKE) confwiz_OBJECTS="$(confwiz_nofinal_OBJECTS)" all-am
#>+ 2
no-final-install:
	$(MAKE) confwiz_OBJECTS="$(confwiz_nofinal_OBJECTS)" install-am
#>+ 3
cvs-clean:
	$(MAKE) admindir=$(top_srcdir)/admin -f $(top_srcdir)/admin/Makefile.common cvs-clean

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 4
$(srcdir)/dirview.cpp: help.h pleasewait.h configwizard.h 
$(srcdir)/main.cpp: help.h pleasewait.h configwizard.h 
$(srcdir)/confwiz.cpp: help.h pleasewait.h configwizard.h 
